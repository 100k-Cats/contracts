{
  "compiler": {
    "version": "0.8.16+commit.07a7930e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "name": "ContractPaused",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "addr",
            "type": "address"
          }
        ],
        "name": "ERC721IncompatibleReceiver",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "size",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "yourSize",
            "type": "uint256"
          }
        ],
        "name": "InsufficientEtherSent",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "InvalidTokenID",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MintEnded",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "NotSubdomainOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_dev",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_you",
            "type": "address"
          }
        ],
        "name": "OnlyDev",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OversizedBatch",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "Unauthorized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroAddress",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "a",
            "type": "address"
          }
        ],
        "name": "AddressChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "coinType",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "newAddress",
            "type": "bytes"
          }
        ],
        "name": "CoinAddressChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes",
            "name": "_contenthash",
            "type": "bytes"
          }
        ],
        "name": "ContenthashChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "name",
            "type": "string"
          }
        ],
        "name": "NameChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "x",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "y",
            "type": "bytes32"
          }
        ],
        "name": "PubkeyChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "indexed": false,
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "name": "TextRecordChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [],
        "name": "DESTROY",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DefaultContenthash",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DefaultResolver",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "Dev",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DomainHash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ENS",
        "outputs": [
          {
            "internalType": "contract iENS",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "ID2Labelhash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "ID2Namehash",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "Namehash2ID",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "name": "_text",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "active",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          }
        ],
        "name": "addr",
        "outputs": [
          {
            "internalType": "address payable",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "batchSize",
            "type": "uint256"
          }
        ],
        "name": "batchMint",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          }
        ],
        "name": "contenthash",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "_hash",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "contractURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "maxSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "metaIPFS",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "mint",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "mintPrice",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          }
        ],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "pubkey",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "x",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "y",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "royalty",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_salePrice",
            "type": "uint256"
          }
        ],
        "name": "royaltyInfo",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "_addr",
            "type": "address"
          }
        ],
        "name": "setAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "coinType",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_addr",
            "type": "bytes"
          }
        ],
        "name": "setCoinAddress",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "_hash",
            "type": "bytes"
          }
        ],
        "name": "setContenthash",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_contractURI",
            "type": "string"
          }
        ],
        "name": "setContractURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "_content",
            "type": "bytes"
          }
        ],
        "name": "setDefaultContenthash",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_resolver",
            "type": "address"
          }
        ],
        "name": "setDefaultResolver",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "sig",
            "type": "bytes4"
          },
          {
            "internalType": "bool",
            "name": "value",
            "type": "bool"
          }
        ],
        "name": "setInterface",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          }
        ],
        "name": "setName",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "x",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "y",
            "type": "bytes32"
          }
        ],
        "name": "setPubkey",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_royalty",
            "type": "uint256"
          }
        ],
        "name": "setRoyalty",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "name": "setText",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "node",
            "type": "bytes32"
          },
          {
            "internalType": "string",
            "name": "key",
            "type": "string"
          }
        ],
        "name": "text",
        "outputs": [
          {
            "internalType": "string",
            "name": "value",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "toggleActive",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newDev",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawEther",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "name": "withdrawToken",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "devdoc": {
      "author": "0xc0de4c0ffee, sshmatrix",
      "kind": "dev",
      "methods": {
        "ID2Namehash(uint256)": {
          "details": "returns namehash of token ID",
          "params": {
            "id": ": token ID "
          },
          "returns": {
            "_0": ": namehash of corresponding subdomain"
          }
        },
        "addr(bytes32)": {
          "details": ": resolve subdomain to owner if no address is set",
          "params": {
            "node": ": sundomain"
          },
          "returns": {
            "_0": ": resolved address "
          }
        },
        "approve(address,uint256)": {
          "details": ": grants approval for a token ID",
          "params": {
            "approved": ": operator address to be approved",
            "id": ": token ID"
          }
        },
        "batchMint(uint256)": {
          "details": ": batchMint() function for sudomains ",
          "params": {
            "batchSize": ": number of subdomains to mint in the batch (maximum batchSize = 12)"
          }
        },
        "constructor": {
          "details": "Constructor"
        },
        "contenthash(bytes32)": {
          "details": ": return default contenhash if no contenthash set",
          "params": {
            "node": ": subdomain"
          }
        },
        "mint()": {
          "details": "mint() function for single sudomain "
        },
        "name()": {
          "details": "EIP721: token name",
          "returns": {
            "_0": ": token name"
          }
        },
        "name(bytes32)": {
          "details": ": get default name at mint",
          "params": {
            "node": ": subdomain"
          },
          "returns": {
            "_name": ": default name"
          }
        },
        "owner()": {
          "details": ": get owner of contract",
          "returns": {
            "_0": ": address of controlling dev or multi-sig wallet"
          }
        },
        "ownerOf(uint256)": {
          "details": "EIP721: returns owner of token ID",
          "params": {
            "id": ": token ID "
          },
          "returns": {
            "_0": ": address of owner"
          }
        },
        "royaltyInfo(uint256,uint256)": {
          "details": ": royalty payment to Dev (or multi-sig)",
          "params": {
            "_salePrice": ": sale price",
            "id": ": token ID"
          },
          "returns": {
            "_0": ": ether amount to be paid as royalty to Dev (or multi-sig)"
          }
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": ": safeTransferFrom function",
          "params": {
            "from": ": from address",
            "id": ": token ID",
            "to": ": to address"
          }
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": ": safeTransferFrom function with extra data",
          "params": {
            "data": ": extra data",
            "from": ": from address",
            "id": ": token ID",
            "to": ": to address"
          }
        },
        "setAddress(bytes32,address)": {
          "details": ": change address of subdomain",
          "params": {
            "_addr": ": new address",
            "node": ": subdomain"
          }
        },
        "setApprovalForAll(address,bool)": {
          "details": ": sets Controller (for all tokens)",
          "params": {
            "approved": ": bool to set",
            "operator": ": operator address to be set as Controller"
          }
        },
        "setCoinAddress(bytes32,uint256,bytes)": {
          "details": ": change address of subdomain for <coin>",
          "params": {
            "coinType": ": <coin>",
            "node": ": subdomain"
          }
        },
        "setContenthash(bytes32,bytes)": {
          "details": ": change contenthash of subdomain",
          "params": {
            "_hash": ": new contenthash",
            "node": ": subdomain"
          }
        },
        "setContractURI(string)": {
          "details": ": sets OpenSea contractURI ",
          "params": {
            "_contractURI": ": URI value"
          }
        },
        "setDefaultContenthash(bytes)": {
          "details": ": sets default contenthash",
          "params": {
            "_content": ": default contenthash to set"
          }
        },
        "setDefaultResolver(address)": {
          "details": ": sets Default Resolver",
          "params": {
            "_resolver": ": resolver address"
          }
        },
        "setInterface(bytes4,bool)": {
          "details": ": setInterface",
          "params": {
            "sig": ": signature",
            "value": ": boolean"
          }
        },
        "setName(bytes32,string)": {
          "details": ": change name record",
          "params": {
            "_name": ": new name",
            "node": ": subdomain"
          }
        },
        "setPubkey(bytes32,bytes32,bytes32)": {
          "details": ": change public key record",
          "params": {
            "node": ": subdomain",
            "x": ": x-coordinate on elliptic curve",
            "y": ": y-coordinate on elliptic curve"
          }
        },
        "setRoyalty(uint256)": {
          "details": "EIP2981 royalty standard",
          "params": {
            "_royalty": ": royalty (1 = 1 %)"
          }
        },
        "setText(bytes32,string,string)": {
          "details": ": change text record",
          "params": {
            "key": ": key to change",
            "node": ": subdomain",
            "value": ": value to set"
          }
        },
        "text(bytes32,string)": {
          "details": ": get text records",
          "params": {
            "key": ": key to query",
            "node": ": subdomain"
          },
          "returns": {
            "value": ": value"
          }
        },
        "toggleActive()": {
          "details": ": Toggle if contract is active or paused, only Dev can toggle"
        },
        "tokenURI(uint256)": {
          "details": ": generate metadata path corresponding to token ID",
          "params": {
            "id": ": token ID"
          },
          "returns": {
            "_0": ": IPFS path to metadata directory"
          }
        },
        "transferFrom(address,address,uint256)": {
          "details": ": transfer function",
          "params": {
            "from": ": from address",
            "id": ": token ID",
            "to": ": to address"
          }
        },
        "transferOwnership(address)": {
          "details": ": transfer contract ownership to new Dev",
          "params": {
            "newDev": ": new Dev"
          }
        },
        "withdrawEther()": {
          "details": ": withdraw ether only to Dev (or multi-sig)"
        },
        "withdrawToken(address)": {
          "details": ": to be used in case some tokens get locked in the contract",
          "params": {
            "token": ": token to release"
          }
        }
      },
      "stateVariables": {
        "DomainHash": {
          "details": ": namehash of 'boredensyachtclub.eth'"
        }
      },
      "title": "BENSYC Core",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "DefaultContenthash()": {
          "notice": ": encoder: https://gist.github.com/sshmatrix/6ed02d73e439a5773c5a2aa7bd0f90f9"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "src/BENSYC.sol": "BoredENSYachtClub"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 6666
    },
    "remappings": [
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/"
    ]
  },
  "sources": {
    "src/BENSYC.sol": {
      "keccak256": "0xdd9dc094b0cb838ccb20586adf925beb1e8ee6c9e1d6bb4fbf058ac0073640a9",
      "license": "WTFPL v6.9",
      "urls": [
        "bzz-raw://2b9774fdf37317a037913b8b9c494b25990942de0fe33af26b4c5d54b7d71371",
        "dweb:/ipfs/QmeFynhjTdNJZBxdnYtESazpyCrn58J86EyRdKgxK1JWuq"
      ]
    },
    "src/Base.sol": {
      "keccak256": "0x644bdda44da2e8d13daaa5ea8715c15f235dc363dbe4858f36ab679f74ffe800",
      "license": "WTFPL v6.9",
      "urls": [
        "bzz-raw://960d5fdef7e384d77f9377a302f68d59c774511ee0a85f2c6bc0ba6b521dc56c",
        "dweb:/ipfs/QmSnyzzaCunHGRNKgMLQAobPb9FsKXDPFfZJreb5fYaAeX"
      ]
    },
    "src/Interface.sol": {
      "keccak256": "0xfc6beeebd98ac1af96e397169367c21d5fc1d437ab3b1bcbebf438bcc3e44f80",
      "license": "WTFPL v6.9",
      "urls": [
        "bzz-raw://b74d51af382e378a430bbefa8171960e1c82cd9e8ad70f478d53a2e11381a3d1",
        "dweb:/ipfs/QmPAXwhc6JvQBgbcSNpeeRzMBuwJf7SoZiLpiEkZXD7sFV"
      ]
    },
    "src/Resolver.sol": {
      "keccak256": "0xf0007fe8025a9f37660526035f535a55f07633181688fcf5a5ec7b6af7f930ec",
      "license": "WTFPL v6.9",
      "urls": [
        "bzz-raw://99bcfd5cf24afc54f001709d856a6e5748c099bcfd805c5c3b19da0cefb040bb",
        "dweb:/ipfs/QmY1SbL3HqWFyNSJK45TWQ2XNsdDB1nLeABGJhpcTKSnXw"
      ]
    },
    "src/Util.sol": {
      "keccak256": "0x591775a2a931be3a66685902710b7de65bbe69a848dd2ade299c0f4bbe1773dd",
      "license": "WTFPL v6.9",
      "urls": [
        "bzz-raw://5a4b49393e31ccb57ecf89a2924efde81ac4c7b40c4c17d1129b6675a1b8c37f",
        "dweb:/ipfs/QmR9VfUNE7WEduVRrRoQetUdtTkqweMhzew5L4HDsEC43i"
      ]
    }
  },
  "version": 1
}